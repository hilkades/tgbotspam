
import telebot
from telebot import types
import re
import time
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification

BOT_TOKEN = '7823075669:AAHm8tuESuo2HrxSZTBMb5jOF5HEvVMSJh8'
bot = telebot.TeleBot(BOT_TOKEN)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
USER_STATES = {}
CHANNEL_STATES = {}

STATE_START = 0
STATE_CHOOSE_FEATURE = 1
STATE_CHOOSE_PLAN = 2
STATE_CHOOSE_PAYMENT = 3
STATE_INPUT_CHANNEL = 4
STATE_ASK_THEME = 5
STATE_ASK_RULES = 6
STATE_CHOOSE_STOP_WORD_ACTION = 7
STATE_CHECK_CONNECTION = 8
STATE_ACTIVE = 9
STATE_RECONFIGURE = 10

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
USER_DATA = {}

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ---
BOT_ACTIVE = {}

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
CHAT_STATISTICS = {}
LAST_STATISTICS_REQUEST = {}
STATISTICS_COOLDOWN = 600 # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞! üëã

{theme_line}

{rules_line}

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è! üòâ
"""
START_MESSAGE = """
–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üëã

–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º.

–°–µ–π—á–∞—Å —è –±—É–¥—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!
"""

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending_users = {}
TIMEOUT_SECONDS = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è ---
MODEL_NAME = "GroNLP/bert-base-dutch-cased"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ - –£–ª—É—á—à–µ–Ω–æ
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_NAME)
model.eval()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏ (inference)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –º–æ–¥–µ–ª—å –Ω–∞ GPU, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ - –£–ª—É—á—à–µ–Ω–æ
model.to(device)

# –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∞–º–∞ - –£–ª—É—á—à–µ–Ω–æ
SPAM_THRESHOLD = 0.85

# --- –û–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ ---
TRAINING_EXAMPLES = [
    ("–ù–∞–±–∏—Ä–∞—é –ª—é–¥–µ–π –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç $500 –≤ –Ω–µ–¥–µ–ª—é. –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, –Ω–µ–ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å, –≤—Å—ë –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ—Ç 18 –ª–µ—Ç –∏ –∂–µ–ª–∞–Ω–∏–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å. –ü–∏—à–∏ –≤ –õ–° –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏! üöÄ", 1),  # –°–ø–∞–º
    ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –ò—â—É –ª—é–¥–µ–π –¥–ª—è –¥–æ–ø –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 1),  # –°–ø–∞–º
    ("–ü—Ä–∏–≤–µ—Ç, –¢—Ä–µ–±—É–µ—Ç—Å—è 5 —á–µ–ª–æ–≤–µ–∫, –¥oc—Ço–π–Ω—ã–π –∑apa–±o—Çok, –±e—Ä—ë–º –±e–∑ o–ø—ã—Ça! üñ• –ü–∏—à–∏—Ç–µ + –≤ –õ–°", 1),  # –°–ø–∞–º
    ("–î–æ—Ö–æ–¥ –æ—Ç 500 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –Ω–µ–¥–µ–ª—é. –ë–µ–∑ –æ–ø—ã—Ç–∞, —Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫. –ü–∏—à–∏—Ç–µ –ø–ª—é—Å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", 1),  # –°–ø–∞–º
    ("–î–æ—Ö–æ–¥ –æ—Ç 500 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –Ω–µ–¥–µ–ª—é. –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, –æ–Ω–ª–∞–π–Ω. –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 1),  # –°–ø–∞–º
    ("–¢—Ä–µ–±—É—é—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–ª—è –æ–Ω–ª–∞–π–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞! 100-150$ –≤ –¥–µ–Ω—å, –≤—Å–µ–≥–æ 1-2 —á–∞—Å–∞ —Ç–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–º–Ω–∏ –ü–∏—à–∏—Ç–µ + –≤ –ª–∏—á–∫—É!", 1), # –°–ø–∞–º
    ("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –≤ —Å—Ñ–µ—Ä–µ AI.", 0), # –ù–µ —Å–ø–∞–º
    ("–û–±—Å—É–∂–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∏–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏.", 0) # –ù–µ —Å–ø–∞–º
]


def finetune_model(model, tokenizer, examples, device, epochs=3):
    """–î–æ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö."""
    model.train()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    optimizer = torch.optim.AdamW(model.parameters(), lr=5e-5)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdamW
    model.to(device) # Ensure model is on the correct device

    for epoch in range(epochs):
        print(f"Epoch: {epoch+1}/{epochs}")
        for text, label in examples:
            optimizer.zero_grad()  # –û–±–Ω—É–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
            inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True).to(device) # Tokenize and send to device
            labels = torch.tensor([label]).to(device)  # Send labels to device

            outputs = model(**inputs, labels=labels)
            loss = outputs.loss
            loss.backward()  # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
            optimizer.step()  # –î–µ–ª–∞–µ–º —à–∞–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

    model.eval()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
    print("–ú–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞.")

# –î–æ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å - –£–ª—É—á—à–µ–Ω–æ
print("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
finetune_model(model, tokenizer, TRAINING_EXAMPLES, device)
print("–î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

def is_telegram_link(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤–∫–ª—é—á–∞—è @username)."""
    pattern = r"^(@[a-zA-Z0-9_]+)|(https?://(t\.me|telegram\.me)/[a-zA-Z0-9_]+)$"
    return bool(re.match(pattern, url))

def convert_to_telegram_link(username):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç @username –≤ —Å—Å—ã–ª–∫—É t.me."""
    return f"https://t.me/{username.lstrip('@')}"

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_START
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item_autopost = types.KeyboardButton("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥")
    item_autoapprove = types.KeyboardButton("–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É")
    item_about = types.KeyboardButton("–û –Ω–∞—Å")
    markup.add(item_autopost, item_autoapprove, item_about)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–û –Ω–∞—Å")
def about_us(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'."""
    user_id = message.from_user.id
    bot.send_message(user_id, "–ú—ã - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —Å—Ç—Ä–µ–º—è—â–∞—è—Å—è —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤. –° –Ω–∞—à–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.  –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π.")
    USER_STATES[user_id] = STATE_START

@bot.message_handler(func=lambda message: message.text in ["–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", "–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"])
def choose_feature(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ '–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥' –∏–ª–∏ '–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ'."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_CHOOSE_FEATURE

    USER_DATA[user_id] = {}

    if message.text == "–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥":
        USER_DATA[user_id]['feature'] = 'autoposting'
        bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥. –û—Ç–ª–∏—á–Ω–æ!")
    elif message.text == "–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É":
        USER_DATA[user_id]['feature'] = 'autoapprove'
        bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ. –û—Ç–ª–∏—á–Ω–æ!")

    choose_plan(message)


def choose_plan(message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_CHOOSE_PLAN
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item_1week = types.KeyboardButton("1 –Ω–µ–¥–µ–ª—è")
    item_1month = types.KeyboardButton("1 –º–µ—Å—è—Ü")
    item_1year = types.KeyboardButton("1 –≥–æ–¥")
    item_trial = types.KeyboardButton("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π")
    markup.add(item_1week, item_1month, item_1year, item_trial)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=markup)

@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == STATE_CHOOSE_PLAN)
def handle_any_text_choose_plan(message):
    user_id = message.from_user.id
    if message.text not in ["1 –Ω–µ–¥–µ–ª—è", "1 –º–µ—Å—è—Ü", "1 –≥–æ–¥", "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π"]:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    else:
        choose_payment(message)


@bot.message_handler(func=lambda message: message.text in ["1 –Ω–µ–¥–µ–ª—è", "1 –º–µ—Å—è—Ü", "1 –≥–æ–¥", "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π"])
def choose_payment(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_CHOOSE_PAYMENT

    if message.text == "1 –Ω–µ–¥–µ–ª—è":
        USER_DATA[user_id]['plan'] = '1week'
    elif message.text == "1 –º–µ—Å—è—Ü":
        USER_DATA[user_id]['plan'] = '1month'
    elif message.text == "1 –≥–æ–¥":
        USER_DATA[user_id]['plan'] = '1year'
    elif message.text == "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π":
        USER_DATA[user_id]['plan'] = 'trial'

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item_sbp = types.KeyboardButton("–°–ë–ü")
    item_card = types.KeyboardButton("–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞")
    item_qiwi = types.KeyboardButton("Qiwi")
    markup.add(item_sbp, item_card, item_qiwi)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == STATE_CHOOSE_PAYMENT)
def handle_any_text_choose_payment(message):
    user_id = message.from_user.id
    if message.text not in ["–°–ë–ü", "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "Qiwi"]:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    else:
        show_cabinet(message)


@bot.message_handler(func=lambda message: message.text in ["–°–ë–ü", "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "Qiwi"])
def show_cabinet(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_INPUT_CHANNEL

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (—Ñ–∏–∫—Ç–∏–≤–Ω—É—é)
    bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ {message.text}.  –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/mychannel –∏–ª–∏ @mychannel):", reply_markup=markup)

@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == STATE_INPUT_CHANNEL)
def process_channel_link(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."""
    user_id = message.from_user.id
    channel_link = message.text

    # Convert @username to a full t.me link if needed
    if channel_link.startswith('@'):
        channel_link = convert_to_telegram_link(channel_link)

    if is_telegram_link(channel_link):
        USER_DATA[user_id]['channel_link'] = channel_link

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π'). –ï—Å–ª–∏ —Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'.", reply_markup=markup)
        USER_STATES[user_id] = STATE_ASK_THEME
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/mychannel –∏–ª–∏ @mychannel).")

@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == STATE_ASK_THEME)
def process_channel_theme(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞."""
    user_id = message.from_user.id
    theme = message.text
    USER_DATA[user_id]['theme'] = theme

    #–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–Ω–∞–ª–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å). –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'.", reply_markup=markup)
    USER_STATES[user_id] = STATE_ASK_RULES

@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == STATE_ASK_RULES)
def process_channel_rules(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–Ω–∞–ª–∞."""
    user_id = message.from_user.id
    rules_link = message.text
    USER_DATA[user_id]['rules_link'] = rules_link

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–ø–∞–º–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item_ignore = types.KeyboardButton("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å")
    item_delete = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    item_delete_and_ban = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.add(item_ignore, item_delete, item_delete_and_ban)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–ø–∞–º–∞:", reply_markup=markup) #–ò–∑–º–µ–Ω–µ–Ω–æ "—Å—Ç–æ–ø-—Å–ª–æ–≤–∞" –Ω–∞ "—Å–ø–∞–º–∞"
    USER_STATES[user_id] = STATE_CHOOSE_STOP_WORD_ACTION

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–µ
@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == STATE_CHOOSE_STOP_WORD_ACTION)
def handle_any_text_stop_word_action(message):
    user_id = message.from_user.id
    if message.text not in ["–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
        process_stop_word_action(message)

@bot.message_handler(func=lambda message: message.text in ["–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"] and USER_STATES.get(message.from_user.id) == STATE_CHOOSE_STOP_WORD_ACTION)
def process_stop_word_action(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–ø–∞–º–∞.""" #–ò–∑–º–µ–Ω–µ–Ω–æ "—Å—Ç–æ–ø-—Å–ª–æ–≤–∞" –Ω–∞ "—Å–ø–∞–º–∞"
    user_id = message.from_user.id
    action = message.text

    USER_DATA[user_id]['stop_word_action'] = action

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    instruction = f"""
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –±–æ—Ç–∞ –∫ –∫–∞–Ω–∞–ª—É:
1. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞: {bot.get_me().username}
2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º.

–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'."""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item_check = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    item_exit = types.KeyboardButton("–í—ã–π—Ç–∏")
    markup.add(item_check, item_exit)
    bot.send_message(user_id, instruction, reply_markup=markup)
    USER_STATES[user_id] = STATE_CHECK_CONNECTION

@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == STATE_CHECK_CONNECTION)
def handle_any_text_check_connection(message):
    user_id = message.from_user.id
    if message.text not in ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "–í—ã–π—Ç–∏"]:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    else:
        check_connection(message)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" and USER_STATES.get(message.from_user.id) == STATE_CHECK_CONNECTION)
def check_connection(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"."""
    user_id = message.from_user.id
    channel_link = USER_DATA[user_id].get('channel_link')
    theme = USER_DATA[user_id].get('theme')
    rules_link = USER_DATA[user_id].get('rules_link')
    stop_word_action = USER_DATA[user_id].get('stop_word_action')

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        channel_id = channel_link.split('/')[-1]
        chat = bot.get_chat(f'@{channel_id}')
        chat_id = chat.id

        USER_DATA[user_id]['channel_id'] = chat_id

        # Get chat member information.
        member = bot.get_chat_member(chat_id=chat_id, user_id=bot.get_me().id)

        if member.status in ['administrator', 'creator']:
            # –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞
            bot.send_message(user_id, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ! –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

            # Initialize bot activation state for the channel
            BOT_ACTIVE[chat_id] = True
            CHANNEL_STATES[chat_id] = STATE_ACTIVE
            USER_STATES[user_id] = STATE_ACTIVE

            # Prepare the welcome message components
            theme_line = ""
            if theme.lower() != "–Ω–µ—Ç":
                theme_line = f"–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ! –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {theme}."
            else:
                theme_line = "–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!"

            rules_line = ""
            if rules_link.lower() != "–Ω–µ—Ç":
                rules_line = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–∞–Ω–∞–ª–∞: {rules_link}."

            # Format the welcome message
            formatted_welcome_message = WELCOME_MESSAGE.format(
                theme_line=theme_line,
                rules_line=rules_line
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã –≤ –∫–∞–Ω–∞–ª
            bot.send_message(chat_id, START_MESSAGE)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å" –∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            markup_active = types.ReplyKeyboardMarkup(resize_keyboard=True)  # remove one_time_keyboard=True
            item_reconfigure = types.KeyboardButton("‚öôÔ∏è –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
            item_statistics = types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            markup_active.add(item_reconfigure, item_statistics)
            bot.send_message(user_id, "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", reply_markup=markup_active)

            # Initialize statistics for the channel
            if chat_id not in CHAT_STATISTICS:
                CHAT_STATISTICS[chat_id] = {
                    'new_members': 0,
                    'spam_deleted': 0
                }

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            item_retry = types.KeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
            item_exit = types.KeyboardButton("–í—ã–π—Ç–∏")
            markup.add(item_retry, item_exit)
            bot.send_message(user_id, "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=markup)
            return  # –í–∞–∂–Ω–æ! –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞

    except telebot.apihelper.ApiTelegramException as e:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item_retry = types.KeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
        item_exit = types.KeyboardButton("–í—ã–π—Ç–∏")
        markup.add(item_retry, item_exit)
        if e.description == 'Bad Request: chat not found':
            bot.send_message(user_id, "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.", reply_markup=markup)
        elif e.description == "Bad Request: user not found":
            bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É.", reply_markup=markup)
        else:
            bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=markup)
        return # –í–∞–∂–Ω–æ! –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
    except Exception as e:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item_retry = types.KeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
        item_exit = types.KeyboardButton("–í—ã–π—Ç–∏")
        markup.add(item_retry, item_exit)
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=markup)
        return  # –í–∞–∂–Ω–æ! –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"
@bot.message_handler(func=lambda message: message.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É" and USER_STATES.get(message.from_user.id) == STATE_CHECK_CONNECTION)
def retry_connection(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"."""
    check_connection(message) # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–æ–≤–∞

#–î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:
@bot.message_handler(func=lambda message: message.chat.type == 'private' and USER_STATES.get(message.from_user.id) == STATE_ACTIVE)
def handle_any_text_state_active(message):
    user_id = message.from_user.id
    if message.text not in ["‚öôÔ∏è –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
        #–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        #–ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–∞–∫-—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
        #bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å' –∏–ª–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'.")
        return  # <--- –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—è
    elif message.text == "‚öôÔ∏è –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å":
        reconfigure_channel(message)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        send_statistics(message)

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å" and USER_STATES.get(message.from_user.id) == STATE_ACTIVE)
def reconfigure_channel(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å"."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_RECONFIGURE
    chat_id = USER_DATA[user_id]['channel_id']

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True) # remove one_time_keyboard=True
    item_channel = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª")
    item_theme = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
    item_rules = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞")
    item_stop_word_action = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å–ø–∞–º–µ") #–ò–∑–º–µ–Ω–µ–Ω–æ "—Å—Ç–æ–ø-—Å–ª–æ–≤–µ" –Ω–∞ "—Å–ø–∞–º–µ"
    # Add "–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞" button
    if BOT_ACTIVE.get(chat_id, False):  # Get current state, default to False
        item_toggle_bot = types.KeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
    else:
        item_toggle_bot = types.KeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")

    item_exit = types.KeyboardButton("–í—ã–π—Ç–∏")
    markup.add(item_channel, item_theme, item_rules, item_stop_word_action, item_toggle_bot, item_exit)

    bot.send_message(user_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª" and USER_STATES.get(message.from_user.id) == STATE_RECONFIGURE)
def reconfigure_channel_link(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_INPUT_CHANNEL  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É" and USER_STATES.get(message.from_user.id) == STATE_RECONFIGURE)
def reconfigure_channel_theme(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –∫–∞–Ω–∞–ª–∞."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_ASK_THEME  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–µ–º—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞" and USER_STATES.get(message.from_user.id) == STATE_RECONFIGURE)
def reconfigure_channel_rules(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∫–∞–Ω–∞–ª–∞."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_ASK_RULES  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å–ø–∞–º–µ" and USER_STATES.get(message.from_user.id) == STATE_RECONFIGURE) #–ò–∑–º–µ–Ω–µ–Ω–æ "—Å—Ç–æ–ø-—Å–ª–æ–≤–µ" –Ω–∞ "—Å–ø–∞–º–µ"
def reconfigure_stop_word_action(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–ø–∞–º–∞.""" #–ò–∑–º–µ–Ω–µ–Ω–æ "—Å—Ç–æ–ø-—Å–ª–æ–≤–∞" –Ω–∞ "—Å–ø–∞–º–∞"
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_CHOOSE_STOP_WORD_ACTION  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item_ignore = types.KeyboardButton("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å")
    item_delete = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    item_delete_and_ban = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.add(item_ignore, item_delete, item_delete_and_ban)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–ø–∞–º–∞:", reply_markup=markup) #–ò–∑–º–µ–Ω–µ–Ω–æ "—Å—Ç–æ–ø-—Å–ª–æ–≤–∞" –Ω–∞ "—Å–ø–∞–º–∞"

@bot.message_handler(func=lambda message: message.text in ["‚úÖ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"] and USER_STATES.get(message.from_user.id) == STATE_RECONFIGURE)
def toggle_bot(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞" / "–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"."""
    user_id = message.from_user.id
    chat_id = USER_DATA[user_id]['channel_id']

    if message.text == "‚úÖ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞":
        BOT_ACTIVE[chat_id] = True
        bot.send_message(user_id, "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!")
    else:
        BOT_ACTIVE[chat_id] = False
        bot.send_message(user_id, "–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")

    # Return to reconfiguration menu to update the button
    reconfigure_channel(message)


@bot.message_handler(func=lambda message: message.text == "–í—ã–π—Ç–∏" and USER_STATES.get(message.from_user.id) == STATE_RECONFIGURE)
def exit_reconfigure(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏" –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    user_id = message.from_user.id
    USER_STATES[user_id] = STATE_ACTIVE
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å" –∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    markup_active = types.ReplyKeyboardMarkup(resize_keyboard=True) # remove one_time_keyboard=True
    item_reconfigure = types.KeyboardButton("‚öôÔ∏è –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
    item_statistics = types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    markup_active.add(item_reconfigure, item_statistics)
    bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=markup_active)

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and USER_STATES.get(message.from_user.id) == STATE_ACTIVE)
def send_statistics(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª—É."""
    user_id = message.from_user.id
    chat_id = USER_DATA[user_id]['channel_id']
    now = time.time()

    if user_id in LAST_STATISTICS_REQUEST and (now - LAST_STATISTICS_REQUEST[user_id]) < STATISTICS_COOLDOWN:
        remaining_time = int(STATISTICS_COOLDOWN - (now - LAST_STATISTICS_REQUEST[user_id]))
        bot.send_message(user_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–Ω–æ–≤–∞.")
        return

    if chat_id in CHAT_STATISTICS:
        stats = CHAT_STATISTICS[chat_id]
        message_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞:
–ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['new_members']}
–£–¥–∞–ª–µ–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π: {stats['spam_deleted']}
        """
        # Add the buttons back
        markup_active = types.ReplyKeyboardMarkup(resize_keyboard=True) # remove one_time_keyboard=True
        item_reconfigure = types.KeyboardButton("‚öôÔ∏è –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
        item_statistics = types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        markup_active.add(item_reconfigure, item_statistics)
        
        bot.send_message(user_id, message_text, reply_markup=markup_active) # Send the statistics with the buttons
        LAST_STATISTICS_REQUEST[user_id] = now
    else:
         # Add the buttons back even if there's no stats
        markup_active = types.ReplyKeyboardMarkup(resize_keyboard=True) # remove one_time_keyboard=True
        item_reconfigure = types.KeyboardButton("‚öôÔ∏è –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
        item_statistics = types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        markup_active.add(item_reconfigure, item_statistics)
        bot.send_message(user_id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞.",  reply_markup=markup_active)

# --- –§—É–Ω–∫—Ü–∏–∏ —Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–∞---
def is_spam(text, threshold=SPAM_THRESHOLD):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–ø–∞–º–æ–º."""
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True).to(device) # Send inputs to device

    with torch.no_grad():
        outputs = model(**inputs)
        probabilities = torch.softmax(outputs.logits, dim=1)
        spam_probability = probabilities[0, 1].item()  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ "—Å–ø–∞–º"

    return spam_probability > threshold


@bot.message_handler(func=lambda message: message.chat.type in ['group', 'supergroup'], content_types=['text', 'photo', 'video', 'audio', 'document'])
def filter_messages(message):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    chat_id = message.chat.id
    # user_id = message.from_user.id # This user id is of the person sending message to group not admin
    # Check if the bot is active for this channel
    if chat_id in BOT_ACTIVE and BOT_ACTIVE[chat_id]:
        if chat_id in CHANNEL_STATES and CHANNEL_STATES[chat_id] == STATE_ACTIVE:
            text = ""
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            if message.text:
                text = message.text
            elif message.caption:
                text = message.caption

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º
            if text and is_spam(text):
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID {message.message_id}.")
                
                # We need to get the user_id of the OWNER not the message sender
                # This can be done by retrieving the owner's user_id from USER_DATA dict using the channel_id
                owner_user_id = None
                for user_id, data in USER_DATA.items():
                    if data.get('channel_id') == chat_id:
                        owner_user_id = user_id
                        break

                # Get the configured action for stop words
                # action = USER_DATA.get(user_id, {}).get('stop_word_action', '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')  # Default to "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" if not set
                action = USER_DATA.get(owner_user_id, {}).get('stop_word_action', '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')  # Default to "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" if not set
                print(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

                try:
                    if action == "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
                        bot.delete_message(chat_id, message.message_id)
                        print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.message_id}.")
                        # Increment spam counter
                        if chat_id in CHAT_STATISTICS:
                            CHAT_STATISTICS[chat_id]['spam_deleted'] += 1

                    elif action == "–£–¥–∞–ª–∏—Ç—å –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                        bot.delete_message(chat_id, message.message_id)
                        bot.kick_chat_member(chat_id, message.from_user.id)
                        print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.message_id} –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}.")
                        # Increment spam counter
                        if chat_id in CHAT_STATISTICS:
                            CHAT_STATISTICS[chat_id]['spam_deleted'] += 1
                    elif action == "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å":
                        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º, –Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.")
                    return  # Exit after processing the spam

                except telebot.apihelper.ApiTelegramException as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
                return
    else:
        print(f"–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id}. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π "–Ø –Ω–µ –±–æ—Ç" - –£–±—Ä–∞–Ω–æ
# def send_verification_message(chat_id, user_id):
#     markup = types.InlineKeyboardMarkup()
#     item_verify = types.InlineKeyboardButton("–Ø –Ω–µ –±–æ—Ç", callback_data=f"verify:{user_id}")
#     markup.add(item_verify)

#     try:
#         bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.", reply_markup=markup)
#         # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
#         pending_users[user_id] = {
#             'chat_id': chat_id,
#             'timestamp': time.time()
#         }
#     except telebot.apihelper.ApiTelegramException as e:
#         print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
#         # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞), —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —á–∞—Ç–∞.
#         try:
#             bot.kick_chat_member(chat_id, user_id)
#         except Exception as ex:
#             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç - –£–±—Ä–∞–Ω–æ
# @bot.message_handler(content_types=['new_chat_members'])
# def handle_new_member(message):
#     chat_id = message.chat.id
#     for new_member in message.new_chat_members:
#         # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
#         if new_member.id == bot.get_me().id:
#             continue
#         if not new_member.is_bot:            # Increment new members counter
#             if chat_id in CHAT_STATISTICS:
#                 CHAT_STATISTICS[chat_id]['new_members'] += 1

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(func=lambda message: message.chat.type == 'private') #–£–±—Ä–∞–ª —É—Å–ª–æ–≤–∏–µ True
def echo_all(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    if USER_STATES.get(user_id) is None:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
    else:
        if USER_STATES.get(user_id) == STATE_ACTIVE:
            # –ï—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, —Ç–æ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            handle_any_text_state_active(message)
        else:
             bot.reply_to(message, "–ù–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.") #–í—Å—Ç–∞–≤–∏–ª else

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()